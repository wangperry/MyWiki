= Windows =
-------------------------------------------------------------------------------------------------------------------------------------------------------
== [[http://msdn.microsoft.com/en-us/library/windows/hardware/ff554836(v=vs.85).aspx|Driver Concepts]] ==
*   User mode and kernel mode
*   Virtual address spaces
*   Device nodes and device stacks
*   I/O request packets
*   Driver stacks
*   Minidrivers and driver pairs
*   KMDF as a generic driver pair model
*   Upper and lower edges of drivers

== WDF ==
{{{
KMDF version	Release method	            Included in this version of     Windows	Drivers using it run on
1.13            Windows 8.1 Preview WDK     Windows 8.1 Preview             Windows 8.1 Preview
1.11            Windows 8 WDK               Windows 8                       Windows Vista and later
1.9             Windows 7 WDK               Windows 7                       Windows XP and later
}}}

-------------------------------------------------------------------------------------------------------------------------------------------------------
== UMDF ==
{{{
UMDF version	Release method	            Included in this version of Windows	    Drivers using it run on
2.0             Windows 8.1 Preview WDK     Windows 8.1 Preview                     Windows 8.1 Preview
1.11            Windows 8                   WDK Windows 8                           Windows Vista and later
1.9             Windows 7                   WDK Windows 7                           Windows XP and later
}}}
*   UMDF1.x:    requires using the COM programming model to write C++ code.
*   UMDF2.0:    write a UMDF driver in the C programming language that calls many of the methods that are available to KMDF drivers
*   File system drivers, display drivers, and print drivers cannot be UMDF drivers.
=== Benefit from UMDF driver ===
*   稳定性更高，因为只能访问进程的地址空间，而不像KMDF那样可以访问整个内核空间
*   UMDF driver运行在LocalService account下，对用户数据及系统文件有有限的访问权限
*   运行环境相对kernel-mode driver相对简单，不用考虑IRQL、page faults和thread context。
*   UMDF2和KMDF可以相互转换，调用的函数大部分相同
*   UMDF2可以在使用user-mode debugger，也可以使用kernel-mode debugger调试，wdfkd.dll有新增函数
=== System-supplied components ===
*   Driver host process(*Wudfhost.ext*)
    *   a child process of the driver manager service
    *   runs in the *LocalService* account
    *   Device pooling
*   Driver manager
*   Reflector
=== I/O request Flow ===
{{{
an application calls a Win32 file I/O function(such as CreateFile, ReadFileEx, or DeviceIoControl)
==> the reflector ==> the driver host process ==> the top of the correct user-mode device stack
|   ==> the reqeust is completed by one of the drivers in the user-mode stack
|   ==> forward to the reflector ==> the reflector ==> kernel-mode stack for completion
}}}

-------------------------------------------------------------------------------------------------------------------------------------------------------
== VC ==
*   [[Query Register and Convert 64 int to String]]
*   [[file operation in kernal mode]]
*   [[http://msdn.microsoft.com/en-us/library/aa363765(v=vs.85).aspx|file operation in user mode]]
*   VS2012 Config
    *   Turn off Unicode in VC++ Project
        *   Project Properties -> General -> Project Defaults -> *Character Set*
    *   .sdf and ipch
        *   Visual Studio用来保存预编译的头文件和Intellisense用的
        *   不在当前工程中生成这些文件, VS用临时文件夹保存这些文件
        {{{
        Tools->Options  Text Editor -> C/C++ -> Advanced
        Fallback Location:  Always use Fallback Location -> Set True
                            Do Not Warn if Fallback Location Used  -> Set True
        }}}
*   [[https://github.com/jaredpar/VsVim|VsVim]] vim extension in VS2012
    *   Tools -> Extensions and Updates -> Search VsVim and Install -> Restart VS2012
    *   Config Key mappings
    *   :set vimrc          -> Show the vimrc which VsVim read

-------------------------------------------------------------------------------------------------------------------------------------------------------
== System ==
*   删除系统服务项
    *   每一个Driver都对应一个Windows Service，该Service在Task Manager的Services List不可见，可以用工具[[http://tools.sysprogs.org/srvman/|srvman]]来查看
    *   也可以用cmd-> sc query RtkBtfilter来查看该服务的状态
    *   如果BT先安装公版device filter，卸载后，再安装Toshiba device filter，会提供service name or display name already exist
    *   原因就是这两个Filter使用的相同的的Service Name&Display Name，即使卸载Driver，该服务RtkBtfilter仍然在Services list里，状态为Stop
    *   只有将其从Service list删除才可以重装另一个Driver，因为Service Name&Display Name必须唯一!!!

-------------------------------------------------------------------------------------------------------------------------------------------------------
== Bat ==
*   [[http://blog.csdn.net/davidhsing/article/details/1996180|for /f]]
{{{
for /f %%i in (a.txt) do echo %%i       //这个会显示a.txt里面的内容，因为/f的作用，会读出a.txt中 的内容。
for %%i in (a.txt) do echo %%i          //而这个只会显示a.txt这个名字，并不会读取其中的内容。
for /f "tokens=2 delims= " %%i in (a.txt) do echo %%i   //以空格分割每一行，并显示第二列
for /f "tokens=* delims= " %%i in (a.txt) do echo %%i   //以空格分割每一行，并显示整行
for /f "skip=2 tokens=*" %%i in (a.txt) do echo %%i     //忽略文件头两行，显示每一行
for /f "eol=. tokens=*" %%i in (a.txt) do echo %%i      //eol用来告诉for忽略以.开始的行
}}}
*   call other.bat para1 para2 ...
*   setlocal enabledelayedexpansion     -->  延时变量绑定

-------------------------------------------------------------------------------------------------------------------------------------------------------
== VS2012 静态编译c c++运行库 ==
*   Win8上编译的程序在Win7上有可能不能运行，原因是它们使用的C运行库不一样，好的解决方法是在编译时将运行库编译进程序，随程序一起发布
*   在VS2012中修改设置：Project Property->Configuration Properties->C/C++->Code Generation->Runtime Library->修改选项为"Mutiple-threaded(/MT)"
-------------------------------------------------------------------------------------------------------------------------------------------------------
== DxDiag ==
A DxDiag, short for Direct X diagnostic, is a listing of the components of your computer. This list includes your CPU, GPU (video card), 
memory, recent driver updates, and other useful pieces of information about your computer. A DxDiag does not contain any sensitive information
that Riot or anyone else can use against you; it is just a list of hardware and software installed on your computer.

DxDiags are used to quickly determine what system hardware or drivers may be conflicting with League of Legends. Whenever posting a technical 
issue on the support forums, or sending an email to support@riotgames.com, it's a good idea to include this diagnostic.

Here is a short guide to obtaining a DxDiag:
*   Press [Windows Key] + 'R' key
*   Type dxdiag in the field and hit 'Ok'
*   The DirectX Diagnostic Tool will open. Press the "Save All Information..." button.
*   Choose where to save the file like your desktop.
*   Attach the DxDiag to your response.
-------------------------------------------------------------------------------------------------------------------------------------------------------
== 无线AP ==
从win7开始，带有无线网卡（比如8723）的电脑，可以将自己的电脑做成无线AP，将有线网络分享给手机/平板使用。具体操作步骤：
*   用管理员方式运行附件中的.bat，记得将bat中第二行的AP名字和AP密码设成你需要的。
*   将有线网络共享给刚刚创建的无线AP:在控制面板中有线网络（本地连接）上点右键--属性--在共享一栏中打上勾，选择对应的无线AP(无线网络连接 2)，见图
*   每次重启都需重新运行.bat，共享设置过一次下次就不必再设置了

-------------------------------------------------------------------------------------------------------------------------------------------------------
== WinDbg ==
*   [[Debug Settings and Useful commands]]
*   [[BSOD 0x9F]]
*   [[IRP]]
*   [[Dead Lock]]
*   [[http://blogs.msdn.com/b/ntdebugging/archive/2011/10/26/debugging-a-clock-watchdog-timeout-bugcheck.aspx|Debugging a CLOCK_WATCHDOG_TIMEOUT Bugcheck]]
*   [[Thread Waiting time]]
*   [[Resource Leak]]
